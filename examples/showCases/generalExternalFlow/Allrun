#!/bin/bash
cd ${0%/*} || exit 1    # Run from this directory

# This script prepares and runs all the participants in one terminal,
# forwarding the solvers' output to log files.
# You need to first download the mesh files separately using the Download_meshes script.
# The script "Allclean" cleans-up the result and log files.

#if [ ! -f Solid/all.msh ]; then
#    echo "Mesh files not found. Use the Download_meshes script to download them."
#    exit
#fi

# Link to the precice-config for the serial run
echo "Setting up the preCICE configuration file for a serial simulation"
#ln -s -f precice-config_serial.xml precice-config.xml

# Participant 1: Inner-Fluid
Participant1="Fluid"
Solver1="pimpleDyMFoam"

    # Prepare
    echo "Preparing the ${Participant1} participant..."
    # Copy the backup of the mesh
    #cp -r ${Participant1}/constant/polyMesh.org ${Participant1}/constant/polyMesh

    # Run and get the process id
    #cd FluidSolver
    echo "Starting the ${Participant1} participant..."
    mpirun -np 1 ./FSIgeneralExternalFlow FSIgeneralExternalFlow.xml 2>&1 &
    #${Solver1} -case ${Participant1} > ${Participant1}.log 2>&1 &
    PIDParticipant1=$!

    #cd ..

# Participant 3: Solid
Participant2="Solid"
Solver2="ccx_preCICE"

    # Run and get the process id
    echo "Starting the ${Participant2} participant..."
    export OMP_NUM_THREADS=4
    export CCX_NPROC_EQUATION_SOLVER=4
    #/home/daviske/Software/Calculix/Calculix/2.15/calculix-adapter-master/bin/${Solver2} -i flap -precice-participant Calculix > ${Participant2}.log 2>&1 &
    #/home/daviske/Software/Calculix/Calculix/CalculiX/calculix-adapter-master/bin/${Solver2} -i flap -precice-participant Calculix > ${Participant2}.log 2>&1 &
    ${Solver2} -i flap -precice-participant Calculix > ${Participant2}.log 2>&1 &
    PIDParticipant2=$!

 # =============== Wait for all the participants to finish =======
echo "Waiting for the participants to exit..., PIDs: ${PIDParticipant1}, ${PIDParticipant2}"
echo "(you may run 'tail -f ${Participant1}.log' in another terminal to check the progress)"
echo "To kill midrun, press 'c'. Ctrl+C will cause the processes to run in the background."
# loop="ps -p ${PIDParticipant1}"
while [ -e /proc/${PIDParticipant1} ]; do
    # loop="ps -p ${PIDParticipant1}"
    read -r -t1 -n1 input
    if [ "$input" = "c" ]; then
        kill ${PIDParticipant1}
        kill ${PIDParticipant2}
        false
    fi
done
 if [ $? -ne 0 ] || [ "$(grep -c -E "error:" ${Participant1}.log)" -ne 0 ] || [ "$(grep -c -E "error:" ${Participant2}.log)" -ne 0 ]; then
    echo ""
    echo "Something went wrong... See the log files for more."
    # precaution
    kill ${PIDParticipant1}
    kill ${PIDParticipant2}
else
    echo ""
    echo "The simulation completed! Reconstructing fields (if parallel)"
    ./removeObsoleteFolders.sh      # For some versions of openfoam, the functionobject is written in an empty timeolder. remove these.
    if [ $parallel -eq 1 ]; then
        reconstructPar -case ${Participant1} > ${Participant1}/reconstructPar.log 2>&1 & 
    fi
    echo "You may now open '${Participant1}/${Participant1}.foam' in ParaView."
    # Note: ".foam" triggers the native OpenFOAM reader of ParaView.
    # Change to ".OpenFOAM" to use the OpenFOAM reader provided with OpenFOAM.
fi
